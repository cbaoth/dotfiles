#!/usr/bin/env bash
# image-concat: Concatenate images creating a simple collage

# Author:   Andreas Weyer <dev@cbaoth.de>
# Keywords: bash shell-script

declare -r _SCRIPT_PATH="$(cd "$(dirname "$0")"; pwd -P)"
declare -r _SCRIPT_FILE="$(basename "$0")"

# include commons lib
for f in {$_SCRIPT_PATH/,$_SCRIPT_PATH/lib,$HOME/lib}/commons.sh; do
   if [[ -f "$f" ]]; then
     source "$f"
     break
   fi
done
if ! command -v "cl::cmd_p" >& /dev/null; then
  printf "commons lib not found, exiting ..\n" >&2
  exit 1
fi

# set options
set -o errtrace
#set -o errexit
set -o pipefail
set -o nounset
(( ${DEBUG_LVL:-0} >= 2 )) && set -o xtrace
IFS=$'\t\n\0'

# traps
trap '_rc=$?; \
     printf "ERROR(%s) in %s:%s\n  -> %s\n  -> %s\n" "${_rc}" \
            "${0:-N/A}" "${LINENO:-N/A}" "${FUNCNAME[@]:-N/A}" \
            c"${BASH_COMMAND:-N/A}"; \
     exit $_rc' ERR
trap 'printf "\nINTERRUPT\n"; exit 1' SIGINT SIGTERM
#trap '_rc=$?; printf "EXIT(%s)\n" "$_rc"; exit $_rc' EXIT

# constants
declare -r _MAX=3840

# arguments
declare mode=default
declare tile=""
declare outfile=""
declare -a infiles

# parse arguments
_parse_args() {
  while [[ -n "${1:-}" ]]; do
    case $1 in
      -[hwn])
        mode="$1"
        shift
        ;;
      -x1)
        tile="x1"
        shift
        ;;
      -o)
        [[ -z "$2" ]] && cl::p_err "missing file name after -o" && return 1
        outfile="$2"
        shift 2
        ;;
      *)
        break
        ;;
    esac
  done
  # at least two input files are required
  if [[ -z "${2:-}" ]]; then
    cl::p_usg "${_SCRIPT_FILE} [-w|-h|-n] [-x1] [-o OUTFILE] INFILE.."
    exit 1
  fi
  # if no outfile name is provided generate one
  if [[ -z "$outfile" ]]; then
    outfile="$(cl::p_file_with_suffix "-concat$(date +%s)" "$1")"
  fi
  # create infiles array from remaining arguments
  infiles=("$@")
}

_concat() {
  cl::q_overwrite "${outfile}" || exit 1
  local min_height="$(identify -format '%h\n' "${infiles[@]}" | sort -n | head -n 1)"
  #min_height="$(echo -e "$min_height\n$((_MAX/$#))" | sort -n | head -n 1)"
  local min_width="$(identify -format '%w\n' "${infiles[@]}" | sort -n | head -n 1)"
  #min_width="$(echo -e "$min_width\n$((_MAX/$#))" | sort -n | head -n 1)"
  local -a args=(-background black -mode Concatenate)
  #args+=(-limit memory 100mb)
  [[ "${tile}" = "x1" ]] && args+=(-tile x1)
  #args+=(-gravity center) # default
  case "${mode}" in
    -n)
      args+=(-geometry +0+0)
      ;;
    -w)
      args+=(-geometry "$(printf "%s\n%s" "${min_width}" "${_MAX}" | sort -n | head -n 1)x")
      ;;
    -h)
      args+=(-geometry "x${min_height}")
      ;;
    *)
      args+=(-geometry "x${min_height}" -extent "${min_width}>x")
      ;;
  esac
  montage "${args[@]}" "${infiles[@]}" "${outfile}"
}

main() {
  _parse_args "$@"
  _concat
}

main "$@"

exit 0
